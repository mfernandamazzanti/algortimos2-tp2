Clase Arbolito:
// Invariante de representación:
    // Cantidad >= 0 
    // Raiz != null (una vez inicializado el trie)
    // El flag de Raiz es nulo y Raiz no tiene un padre (Raiz.Padre = null)

Clase Nodo (del arbolito):
// Invariante de representación: 
        // Hijos != null 
        // Todos los nodos hijos de un mismo padre deben tener flags distintas y dichas flags deben estar en orden lexicográfico según el alfabeto ASCII.
        // Valor puede ser null 


Clase SistemaSIU:
// Invariante de representación:
    // estudiantes relaciona cada estudiante (LU) a las materias y a la cantidad de materias a la que está inscripto (adentro de la clase Estudiante)
    // carreras relaciona cada carrera (nombre de la carrera) a las materias pertenecientes a esa carrera (adentro de la clase Carrera)
    // carreras != null y estudiantes != null
    // las claves de carreras son no vacías (las carreras deben tener un nombre no vacío)
    // estudiantes tiene claves acotadas de largo 6 (todas las libretas tienen 6 caracteres)
    // carreras y estudiantes no tienen ninguna clave asociada al valor 'null' (no contienen elementos 'null')

Clase Carrera:
// Invariante de representación: 
    // materias != null
    // materias relaciona cada materia (nombre de la materia) de una carrera con su plantel docente, con los estudiantes anotados en esa materia y con los nombres que tiene esa materia en otras carreras (todo eso adentro de la clase Materia)
    // las claves de materias son no vacías (las materias deben tener un nombre no vacío)
    // ninguna clave de materias está asociada al valor 'null' (no contiene elementos 'null')
    // nombre no puede ser vacío (una carrera tiene que tener un nombre no vacio)
    

Clase Materia:
 // Invariante de representación:
    // PlantelDocente != null , estudiantesAnotados != null y equivalentes != null
    // PlantelDocente.size()=4 (hay exactamente 4 cargos docentes) y todos los elementos de PlantelDocente son >=0 (no puede haber una cantidad negativa de docentes)
    // para todo estudiante en estudiantesAnotados de una materia,: la materia debe pertencer a las MateriasIncriptas de cada estudiante
    // estudiantesAnotados no tiene elementos 'null' y no tiene elementos repetidos
    // equivalentes no tiene elementos null, no tiene elementos repetidos y equivalentes.size()>=1 (una materia debe estar asociada a por lo menos una carrera)


Clase Estudiante:
// Invariante de representación: 
    // MateriasInscriptas relaciona cada materia (nombre de la materia) a la que está inscripto el estudiante con su plantel docente, con los estudiantes anotados en esa materia y con los nombres que tiene esa materia en otras carreras (todo eso adentro de la clase Materia)
    // para toda materia en MateriasInscriptas de un estudiante: el estudiante debe pertenecer a los estudiantesAnotados de cada materia
    // todas las materias en MateriasInscriptas deben pertenecer a las materias de una Carrera
    // MateriasInscriptas != null
    // LU siempre tiene largo 6 (todas las libretas tienen 6 caracteres)
    // cardinal >= 0 (un estudiante no puede estar inscripto en una cantidad negativa de materias) y cardinal=MateriasInscriptas.cardinal() 
    // las claves de MateriasInscriptas son no vacías (las materias deben tener un nombre no vacío) y ninguna clave de MateriasInscriptas está asociada al valor 'null'


Clase InfoMateria:
// Invariante de representación: 
    // paresCarreraMateria.length>=1 (toda materia está asociada a por lo menos una carrera), paresCarreraMateria no contiene elementos 'null' y no contiene elementos repetidos

Clase ParCarreraMateria:
// Invariante de representación: 
    // carrera es no vacío (una carrera debe tener un nombre no vacío)
    // carreraObj != null
    // carreraObj.nombre = carrera
    // carreraObj.materias.pertence(nombreMateria)==true
    // nombreMateria es no vacío (una materia debe tener un nombre no vacío)
